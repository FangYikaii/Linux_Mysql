一、网络编程

5、应用层（port8080：http；port21：ftp）
4、传输层（报文发送接收：TCP保证接收，UDP不保证）
3、网络层（路由，转发）
2、数据链路层（报文优先级管理，二层转发，流量控制）
1、物理层(报文成帧处理)

    网络的不同层次实现网络的不同功能。物理层主要实现报文的成帧处理；数据链路层完成对报文的优先级的管理，同时实现二层转发和流量控制；网络层实现路由和转发的功能，一方面它需要实现对报文的fragment处理，另外一方面它还需要对路由信息进行处理和保存；传输层实现报文的发送和接受，它利用计数、时序、定时器、重发等机制实现对报文的准确发送，当然这都是tcp的发送机制，而udp一般是不保证报文正确发送和接收的；应用层就是根据传输层的端口信息调用不同的程序来处理传输的内容，端口8080是http报文，端口21是ftp报文等等。上面的逻辑稍显复杂，朋友们可以这么理解，

    物理层关心的是如何把电气信号变成一段报文；数据链路层关心的是mac地址、vlan、优先级等；网络层关心的是ip地址，下一跳ip；传输层关心的是端口资源；应用层关心的是报文组装、解析、渲染、存储、执行等等。
	
    一般来说，作为服务器端口的处理流程是这样的，

    a) 创建socket
    b) 绑定socket到特定的ip地址
    c) 对socket进行侦听处理
    d) 接受socket，表明有客户端和服务器连接
    e) 和客户端循环收发报文
    f) 关闭socket

    作为服务器程序而言，它要对特定的端口进行绑定和侦听处理，这样稍显复杂。但是如果是编写客户端的程序，一切的一切就变得非常简单了，

    a) 创建socket
    b) 链接服务器端地址
    c) 和服务器端的socket收发报文
