一、
1. 什么是shell--命令解释器
用户使用Linux时是通过命令来完成所需操作，一个命令就是用户和shell之间对话的基本单位，它是由多个字符组成的并以换行符结束的字符串。shell解释用户输入的命令。所以说：
Shell就是一个命令行解释器，它的作用就是遵循一定的语法将输入的命令加以解释并传给系统。它为用户提供了一个向Linux发送请求以便运行程序的接口系统级程序，用户可以用Shell来启动、挂起、停止甚至是编写一些程序。
Shell本身是一个用C语言编写的程序，它是用户使用Unix/Linux的桥梁，用户的大部分工作都是通过Shell完成的。Shell既是一种命令语言，又是一种程序设计语言。作为命令语言，它交互式地解释和执行用户输入的命令；作为程序设计语言，它定义了各种变量和参数，并提供了许多在高级语言中才具有的控制结构，包括循环和分支。
它虽然不是Unix/Linux系统内核的一部分，但它调用了系统核心的大部分功能来执行程序、建立文件并以并行的方式协调各个程序的运行。因此，对于用户来说，shell是最重要的实用程序，深入了解和熟练掌握shell的特性极其使用方法，是用好Unix/Linux系统的关键。
可以说，shell使用的熟练程度反映了用户对Unix/Linux使用的熟练程度。
Shell提供了你与操作系统之间通讯的方式，有两种执行命令的方式： 
? 交互式（Interactive）：解释执行用户的命令，用户输入一条命令，Shell就解释执行一条。 
? 批处理（Batch）：用户事先写一个Shell脚本(Script)，其中有很多条命令，让Shell一次把这些命令执行完，而不必一条一条地敲命令。
Shell脚本和编程语言很相似，也有变量和流程控制语句，但Shell脚本是解释执行的，不需要编译，Shell程序从脚本中一行一行读取并执行这些命令，相当于一个用户把脚本中的命令一行一行敲到Shell提示符下执行。
Shell初学者请注意，在平常应用中，建议不要用 root 帐号运行 Shell 。作为普通用户，不管您有意还是无意，都无法破坏系统；但如果是 root，那就不同了，只要敲几个字母，就可能导致灾难性后果。



2. Shell 环境
Shell 编程跟Java、PHP编程一样，只要有一个能编写代码的文本编辑器和一个能解释和执行的脚本解释器就可以了。
Linux的Shell解释器种类众多，常见的有： 
Bourne Shell（/usr/bin/sh或/bin/sh） 
Bourne Again Shell（/bin/bash） 
C Shell（/usr/bin/csh） 
K Shell（/usr/bin/ksh） 
Shell for Root（/sbin/sh） 
……
Bourne Again Shell，由于易用和免费，Bash在日常工作中被广泛使用。同时，Bash也是大多数Linux系统默认的Shell。
在一般情况下，人们并不区分 Bourne Shell 和 Bourne Again Shell，所以，像 #!/bin/sh，它同样也可以改为#!/bin/bash




3. 第一个Shell脚本
打开文本编辑器，新建一个文件，扩展名为sh（sh代表shell），扩展名并不影响脚本执行，见名知意。
（通过这种方式运行bash脚本，第一行一定要写对，好让系统查找到正确的解释器。）
输入一些代码：

#!/bin/bash
echo "Hello World !"
“#!” 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种Shell。echo命令用于向窗口输出文本。

运行Shell脚本有两种方法。
(1)作为可执行程序
	将上面的代码保存为test.sh，并 cd 到相应目录：
	chmod +x ./test.sh  #使脚本具有执行权限
	./test.sh           #执行脚本

	注意：一定要写成./test.sh，而不是test.sh。运行其它二进制的程序也一样，直接写test.sh，linux系统会去PATH里寻找有没有叫test.sh的，而只有/bin, /sbin, /usr/bin，/usr/sbin等在PATH里，你的当前目录通常不在PATH里，所以写成test.sh是会找不到命令的，要用./test.sh告诉系统说，就在当前目录找。


(2)作为解释器参数
这种运行方式是，直接运行解释器，其参数就是shell脚本的文件名，如：
/bin/sh test.sh
这种方式运行的脚本，不需要在第一行指定解释器信息，写了也没用。


再看一个例子。下面的脚本使用 read 命令从 stdin 获取输入并赋值给 PERSON 变量，最后在 stdout 上输出：
#!/bin/bash
echo "What is your name?"
read PERSON
echo "Hello, $PERSON"
运行脚本：
chmod +x ./test.sh
$./test.sh
What is your name?
chenlei
Hello, chenlei



4. Shell 基本语法
变量
在shell编程中，所有的变量都由字符串组成，并且您不需要对变量进行声明。要赋值给一个变量，您可以这样写：
变量名=值 
取出变量值可以加一个美元符号（$）在变量前面
注意： 
变量赋值时，“=”两边都不能有空格 
BASH中的语句结尾不需要分号

//例子：
#!/bin/sh
#set varible a
a="hello world"
#print a
echo "A is:"
echo $a

//例子：
num=2
echo “this is the $numnd”
//输出？
//this is the
//原因：
//因为shell会去搜索numnd变量的值，但这个变量是没有值的。
//可以使用{}来告诉shell我们要打印的是num变量：
//echo “this is the ${num}nd”
//这将打印： “this is the 2nd”



默认变量
$#:传入脚本的命令行参数个数
$*:所有命令行参数值，在各个参数值间留有空格
$0:命令本身（shell文件名）
$1:第一个命令行参数
$2:第二个命令行参数
//例子：
#!/bin/sh
echo "number of vars:"$#
echo "values of vars:"$*
echo "value of var0:"$0
echo "value of var1:"$1
echo "value of var2:"$2
echo "value of var3:"$3
echo "value of var4:"$4 

./s2 a b c
//执行结果
number of vars:3
values of vars:a b c
value of var0:./s2
value of var1:a
value of var2:b
value of var3:c
value of var4:


局部变量
#!/bin/bash
    hello="var1“
    echo $hello
    function func1 
    {    
            local hello="var2"  
            echo $hello    
    }   
    func1   
    echo $hello

//输出：
//var1
//var2
//var1